name: Deploy Portfolio to VPS

on:
  push:
    branches: [main, production]
  pull_request:
    branches: [main]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - staging

env:
  NODE_VERSION: '20'
  PNPM_VERSION: 'latest'

jobs:
  # Тестирование и проверка кода
  test:
    name: Test and Lint
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Generate Prisma client
        run: pnpm prisma generate

      - name: Type checking
        run: pnpm check-types

      - name: Linting
        run: pnpm lint

      - name: Code formatting check
        run: pnpm check-format

      - name: Build application
        run: pnpm build
        env:
          SKIP_ENV_VALIDATION: true

  # Сборка и деплой
  deploy:
    name: Deploy to VPS
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/production' || github.event_name == 'workflow_dispatch'

    environment:
      name: ${{ github.ref == 'refs/heads/production' && 'production' || (github.event.inputs.environment || 'staging') }}
      url: ${{ secrets.APP_URL }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup SSH key
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.VPS_SSH_KEY }}

      - name: Add VPS to known hosts
        run: |
          ssh-keyscan -H ${{ secrets.VPS_HOST }} >> ~/.ssh/known_hosts

      - name: Create deployment package
        run: |
          tar -czf deployment.tar.gz \
            --exclude='.git' \
            --exclude='node_modules' \
            --exclude='.next' \
            --exclude='logs' \
            --exclude='*.log' \
            .

      - name: Upload deployment package
        run: |
          scp deployment.tar.gz ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }}:/tmp/

      - name: Deploy application
        run: |
          ssh ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} << 'EOF'
            set -e
            
            # Переход в директорию приложения
            cd /home/portfolio
            
            # Создание бэкапа текущей версии
            if [ -d "current" ]; then
              sudo ./scripts/backup.sh full || echo "Backup failed, continuing..."
              mv current backup-$(date +%Y%m%d_%H%M%S) || true
            fi
            
            # Распаковка новой версии
            mkdir -p current
            cd current
            tar -xzf /tmp/deployment.tar.gz
            rm /tmp/deployment.tar.gz
            
            # Проверка наличия необходимых файлов
            if [ ! -f ".env" ]; then
              if [ -f "../.env" ]; then
                cp ../.env .
              else
                echo "ERROR: .env file not found!"
                exit 1
              fi
            fi
            
            # Деплой
            chmod +x scripts/*.sh
            sudo ./scripts/deploy.sh
            
            # Проверка здоровья приложения
            sleep 30
            if ! curl -f http://localhost/health; then
              echo "ERROR: Health check failed!"
              exit 1
            fi
            
            echo "Deployment completed successfully!"
          EOF

      - name: Verify deployment
        run: |
          # Проверка доступности приложения
          for i in {1..10}; do
            if curl -f ${{ secrets.APP_URL }}/health; then
              echo "Application is healthy!"
              exit 0
            fi
            echo "Attempt $i failed, retrying in 30 seconds..."
            sleep 30
          done
          echo "Health check failed after 10 attempts"
          exit 1

      - name: Notify deployment status
        if: always()
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: '#deployments'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

  # Rollback в случае неудачи
  rollback:
    name: Rollback deployment
    runs-on: ubuntu-latest
    needs: deploy
    if: failure() && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/production')

    steps:
      - name: Setup SSH key
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.VPS_SSH_KEY }}

      - name: Add VPS to known hosts
        run: |
          ssh-keyscan -H ${{ secrets.VPS_HOST }} >> ~/.ssh/known_hosts

      - name: Rollback to previous version
        run: |
          ssh ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} << 'EOF'
            set -e
            
            cd /home/portfolio
            
            # Найти последний бэкап
            BACKUP_DIR=$(ls -t | grep "backup-" | head -1)
            
            if [ -n "$BACKUP_DIR" ]; then
              echo "Rolling back to $BACKUP_DIR"
              
              # Остановить текущие сервисы
              cd current
              sudo docker-compose down || true
              cd ..
              
              # Восстановить из бэкапа
              rm -rf current
              mv "$BACKUP_DIR" current
              
              # Запустить сервисы
              cd current
              sudo ./scripts/deploy.sh
              
              echo "Rollback completed"
            else
              echo "No backup found for rollback!"
              exit 1
            fi
          EOF

      - name: Notify rollback
        uses: 8398a7/action-slack@v3
        with:
          status: 'warning'
          text: 'Deployment failed and was rolled back'
          channel: '#deployments'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}
