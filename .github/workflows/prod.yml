name: Deploy to Production VPS

on:
  push:
    branches:
      - main
  workflow_dispatch:

env:
  VPS_HOST: '79.174.78.124'
  VPS_USER: 'root'
  PROJECT_DIR: '/home/portfolio/current'

jobs:
  deploy:
    name: Deploy to nkolosov.com
    runs-on: ubuntu-latest

    environment:
      name: production
      url: https://nkolosov.com

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup SSH key
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Add VPS to known hosts
        run: |
          ssh-keyscan -H ${{ env.VPS_HOST }} >> ~/.ssh/known_hosts

      - name: Create deployment package
        run: |
          echo "üì¶ Creating deployment package..."
          echo "Current directory: $(pwd)"
          echo "Directory contents:"
          ls -la

          # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —á–∏—Å—Ç–æ–π –∫–æ–ø–∏–∏
          mkdir -p /tmp/portfolio-build

          # –ö–æ–ø–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω—ã–µ —Ñ–∞–π–ª—ã, –∏—Å–∫–ª—é—á–∞—è –Ω–µ–Ω—É–∂–Ω—ã–µ
          echo "üìã Copying files to temporary directory..."
          if command -v rsync >/dev/null 2>&1; then
            rsync -av \
              --exclude='.git' \
              --exclude='node_modules' \
              --exclude='.next' \
              --exclude='logs' \
              --exclude='*.log' \
              --exclude='.env*' \
              --exclude='coverage' \
              --exclude='.nyc_output' \
              --exclude='cypress/videos' \
              --exclude='cypress/screenshots' \
              --exclude='.cache' \
              --exclude='dist' \
              --exclude='build' \
              --exclude='.DS_Store' \
              --exclude='*.tmp' \
              --exclude='*.temp' \
              --exclude='.github' \
              --exclude='.husky' \
              ./ /tmp/portfolio-build/
          else
            # Fallback: –∏—Å–ø–æ–ª—å–∑—É–µ–º cp —Å find –¥–ª—è –∏—Å–∫–ª—é—á–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤
            echo "rsync not available, using cp with find..."
            find . -type f \
              ! -path './.git/*' \
              ! -path './node_modules/*' \
              ! -path './.next/*' \
              ! -path './logs/*' \
              ! -name '*.log' \
              ! -name '.env*' \
              ! -path './coverage/*' \
              ! -path './.nyc_output/*' \
              ! -path './cypress/videos/*' \
              ! -path './cypress/screenshots/*' \
              ! -path './.cache/*' \
              ! -path './dist/*' \
              ! -path './build/*' \
              ! -name '.DS_Store' \
              ! -name '*.tmp' \
              ! -name '*.temp' \
              ! -path './.github/*' \
              ! -path './.husky/*' \
              -exec cp --parents {} /tmp/portfolio-build/ \;
          fi

          # –°–æ–∑–¥–∞–µ–º –∞—Ä—Ö–∏–≤ –∏–∑ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
          echo "üóúÔ∏è Creating archive from clean copy..."
          cd /tmp
          tar -czf portfolio-deploy.tar.gz -C portfolio-build .

          # –ü–µ—Ä–µ–º–µ—â–∞–µ–º –∞—Ä—Ö–∏–≤ –æ–±—Ä–∞—Ç–Ω–æ –≤ —Ä–∞–±–æ—á—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
          mv portfolio-deploy.tar.gz $GITHUB_WORKSPACE/
          cd $GITHUB_WORKSPACE

          # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –∞—Ä—Ö–∏–≤–∞
          if [ -f "portfolio-deploy.tar.gz" ]; then
            echo "‚úÖ Archive created successfully"
            echo "Archive size: $(du -h portfolio-deploy.tar.gz | cut -f1)"
            echo "Archive contents (first 20 files):"
            tar -tzf portfolio-deploy.tar.gz | head -20
          else
            echo "‚ùå Failed to create archive"
            exit 1
          fi

          # –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
          rm -rf /tmp/portfolio-build

      - name: Upload deployment package
        run: |
          echo "üì§ Uploading deployment package to VPS..."
          echo "Target: ${{ env.VPS_USER }}@${{ env.VPS_HOST }}:/tmp/"

          # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
          if [ ! -f "portfolio-deploy.tar.gz" ]; then
            echo "‚ùå Deployment package not found!"
            exit 1
          fi

          # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª –Ω–∞ —Å–µ—Ä–≤–µ—Ä
          scp -o StrictHostKeyChecking=no portfolio-deploy.tar.gz ${{ env.VPS_USER }}@${{ env.VPS_HOST }}:/tmp/

          echo "‚úÖ Package uploaded successfully"

      - name: Deploy application
        run: |
          ssh -o StrictHostKeyChecking=no ${{ env.VPS_USER }}@${{ env.VPS_HOST }} << 'EOF'
            set -e
            
            echo "üöÄ Starting deployment to nkolosov.com..."
            echo "Current user: $(whoami)"
            echo "Current directory: $(pwd)"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
            if [ ! -f "/tmp/portfolio-deploy.tar.gz" ]; then
              echo "‚ùå Deployment package not found in /tmp/"
              exit 1
            fi
            
            echo "üì¶ Package size: $(du -h /tmp/portfolio-deploy.tar.gz | cut -f1)"
            
            # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞ –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            mkdir -p /home/portfolio
            cd /home/portfolio
            
            echo "üìÇ Current location: $(pwd)"
            
            # –°–æ–∑–¥–∞–µ–º –±—ç–∫–∞–ø —Ç–µ–∫—É—â–µ–π –≤–µ—Ä—Å–∏–∏
            if [ -d "current" ]; then
              echo "üì¶ Creating backup of current version..."
              if [ -f "./current/scripts/backup.sh" ]; then
                sudo ./current/scripts/backup.sh database || echo "‚ö†Ô∏è  Backup failed, continuing..."
              fi
              mv current backup-$(date +%Y%m%d_%H%M%S) 2>/dev/null || true
              echo "‚úÖ Backup created"
            fi
            
            # –†–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ–º –Ω–æ–≤—É—é –≤–µ—Ä—Å–∏—é
            echo "üìÇ Extracting new version..."
            mkdir -p current
            cd current
            tar -xzf /tmp/portfolio-deploy.tar.gz
            
            echo "üìã Extracted files:"
            ls -la | head -10
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ .env —Ñ–∞–π–ª–∞
            if [ ! -f ".env" ]; then
              if [ -f "../.env" ]; then
                cp ../.env .
                echo "‚úÖ Copied existing .env file"
              elif [ -f "env.example" ]; then
                echo "‚ö†Ô∏è  Creating .env from example..."
                cp env.example .env
                echo "üîß Please update .env file with production values"
              else
                echo "‚ùå No .env template found!"
                exit 1
              fi
            fi
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Å–∫—Ä–∏–ø—Ç–æ–≤
            if [ ! -d "scripts" ]; then
              echo "‚ùå Scripts directory not found!"
              exit 1
            fi
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∞–≤–∞
            echo "üîß Setting permissions..."
            chmod +x scripts/*.sh
            
            # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è portfolio –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            if ! id "portfolio" &>/dev/null; then
              echo "üë§ Creating portfolio user..."
              sudo useradd -m -s /bin/bash portfolio || true
              sudo usermod -aG docker portfolio || true
            fi
            
            chown -R portfolio:portfolio . 2>/dev/null || true
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –¥–µ–ø–ª–æ–π —á–µ—Ä–µ–∑ Docker
            echo "üê≥ Starting Docker deployment..."
            if [ -f "./scripts/deploy.sh" ]; then
              ./scripts/deploy.sh
            else
              echo "‚ùå Deploy script not found!"
              exit 1
            fi
            
            # –û—á–∏—Å—Ç–∫–∞
            rm /tmp/portfolio-deploy.tar.gz
            
            echo "‚úÖ Deployment completed successfully!"
          EOF

      - name: Health check
        run: |
          echo "üîç Performing health check..."

          # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–æ–≤ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
          ssh -o StrictHostKeyChecking=no ${{ env.VPS_USER }}@${{ env.VPS_HOST }} << 'EOF'
            echo "üìä Checking Docker services status..."
            cd /home/portfolio/current
            docker-compose ps || echo "Docker compose not running yet"
            
            echo "üîç Checking running containers..."
            docker ps --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}"
          EOF

          # –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
          echo "‚è≥ Waiting 60 seconds for application to start..."
          sleep 60

          # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å
          echo "üåê Testing application endpoints..."
          for i in {1..15}; do
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º HTTP —Å–Ω–∞—á–∞–ª–∞
            if curl -f -s --connect-timeout 10 http://nkolosov.com/health > /dev/null 2>&1; then
              echo "‚úÖ HTTP health check passed!"
              break
            fi
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º HTTPS
            if curl -f -s --connect-timeout 10 -k https://nkolosov.com/health > /dev/null 2>&1; then
              echo "‚úÖ HTTPS health check passed!"
              break
            fi
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ IP
            if curl -f -s --connect-timeout 10 http://${{ env.VPS_HOST }}:3000/api/health > /dev/null 2>&1; then
              echo "‚úÖ Direct IP health check passed!"
              break
            fi
            
            echo "‚è≥ Attempt $i/15 - application not ready yet..."
            if [ $i -eq 15 ]; then
              echo "‚ùå Health check failed after 15 attempts"
              
              # –î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø—Ä–∏ –æ—à–∏–±–∫–µ
              echo "üîç Diagnostic information:"
              ssh -o StrictHostKeyChecking=no ${{ env.VPS_USER }}@${{ env.VPS_HOST }} << 'DIAG_EOF'
                echo "=== Docker containers ==="
                docker ps -a
                echo "=== Application logs ==="
                cd /home/portfolio/current
                docker-compose logs --tail=50 app || echo "No app logs available"
                echo "=== Nginx logs ==="
                docker-compose logs --tail=20 nginx || echo "No nginx logs available"
              DIAG_EOF
              
              exit 1
            fi
            
            sleep 20
          done

          echo "üéâ Application is healthy and responding!"

      - name: Deployment summary
        if: always()
        run: |
          echo "## üöÄ Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **Target**: https://nkolosov.com" >> $GITHUB_STEP_SUMMARY
          echo "- **Status**: ${{ job.status }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Branch**: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
