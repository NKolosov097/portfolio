name: Deploy to Production VPS

on:
  push:
    branches:
      - main
  workflow_dispatch:

env:
  VPS_HOST: '79.174.78.124'
  VPS_USER: 'root'
  PROJECT_DIR: '/home/portfolio/current'

jobs:
  deploy:
    name: Deploy to nkolosov.com
    runs-on: ubuntu-latest

    environment:
      name: production
      url: https://nkolosov.com

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup SSH key
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Add VPS to known hosts
        run: |
          ssh-keyscan -H ${{ env.VPS_HOST }} >> ~/.ssh/known_hosts

      - name: Create deployment package
        run: |
          tar -czf portfolio-deploy.tar.gz \
            --exclude='.git' \
            --exclude='node_modules' \
            --exclude='.next' \
            --exclude='logs' \
            --exclude='*.log' \
            --exclude='.env' \
            .

      - name: Upload deployment package
        run: |
          scp portfolio-deploy.tar.gz ${{ env.VPS_USER }}@${{ env.VPS_HOST }}:/tmp/

      - name: Deploy application
        run: |
          ssh ${{ env.VPS_USER }}@${{ env.VPS_HOST }} << 'EOF'
            set -e
            
            echo "🚀 Starting deployment to nkolosov.com..."
            
            # Создаем директорию проекта если не существует
            mkdir -p ${{ env.PROJECT_DIR }}
            cd $(dirname ${{ env.PROJECT_DIR }})
            
            # Создаем бэкап текущей версии
            if [ -d "current" ]; then
              echo "📦 Creating backup..."
              sudo ./current/scripts/backup.sh database || echo "Backup failed, continuing..."
              mv current backup-$(date +%Y%m%d_%H%M%S) 2>/dev/null || true
            fi
            
            # Распаковываем новую версию
            echo "📂 Extracting new version..."
            mkdir -p current
            cd current
            tar -xzf /tmp/portfolio-deploy.tar.gz
            
            # Проверяем наличие .env файла
            if [ ! -f ".env" ]; then
              if [ -f "../.env" ]; then
                cp ../.env .
                echo "✅ Copied existing .env file"
              else
                echo "⚠️  Creating .env from example..."
                cp env.example .env
                echo "🔧 Please update .env file with production values"
              fi
            fi
            
            # Устанавливаем права
            chmod +x scripts/*.sh
            chown -R portfolio:portfolio . 2>/dev/null || true
            
            # Запускаем деплой через Docker
            echo "🐳 Starting Docker deployment..."
            ./scripts/deploy.sh
            
            # Очистка
            rm /tmp/portfolio-deploy.tar.gz
            
            echo "✅ Deployment completed successfully!"
          EOF

      - name: Health check
        run: |
          echo "🔍 Performing health check..."

          # Ждем запуска приложения
          sleep 30

          # Проверяем доступность
          for i in {1..10}; do
            if curl -f -s https://nkolosov.com/health > /dev/null; then
              echo "✅ Application is healthy!"
              exit 0
            fi
            echo "⏳ Attempt $i/10 - waiting for application to start..."
            sleep 30
          done

          echo "❌ Health check failed after 10 attempts"
          exit 1

      - name: Deployment summary
        if: always()
        run: |
          echo "## 🚀 Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **Target**: https://nkolosov.com" >> $GITHUB_STEP_SUMMARY
          echo "- **Status**: ${{ job.status }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Branch**: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
