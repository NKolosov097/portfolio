name: Deploy to Production VPS

on:
  push:
    branches:
      - main
  workflow_dispatch:

env:
  VPS_HOST: ${{ secrets.VPS_HOST }}
  VPS_USER: ${{ secrets.VPS_USER }}
  PROJECT_DIR: ${{ secrets.PROJECT_DIR }}

jobs:
  deploy:
    name: Deploy to nkolosov.com
    runs-on: ubuntu-latest
    timeout-minutes: 60

    environment:
      name: production
      url: https://nkolosov.com

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup SSH key
        run: |
          echo "üîê Setting up SSH key..."

          # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é .ssh
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh

          # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–∞ –≤ —Å–µ–∫—Ä–µ—Ç–∞—Ö
          if [ -z "${{ secrets.SSH_PRIVATE_KEY }}" ]; then
            echo "‚ùå SSH_PRIVATE_KEY secret is not set!"
            exit 1
          fi

          # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∫–ª—é—á –≤ —Ñ–∞–π–ª (–ø—Ä–æ–±—É–µ–º –æ–±–∞ —Å–ø–æ—Å–æ–±–∞)
          if [[ "${{ secrets.SSH_PRIVATE_KEY }}" == *"BEGIN"* ]]; then
            echo "üìù Using direct key format"
            echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          else
            echo "üìù Trying base64 decode"
            echo "${{ secrets.SSH_PRIVATE_KEY }}" | base64 -d > ~/.ssh/id_rsa
          fi
          chmod 600 ~/.ssh/id_rsa

          # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –∫–ª—é—á–∞
          if ! head -1 ~/.ssh/id_rsa | grep -q "BEGIN.*PRIVATE KEY"; then
            echo "‚ùå Invalid SSH key format!"
            echo "Key should start with -----BEGIN and contain PRIVATE KEY"
            exit 1
          fi

          # –ó–∞–ø—É—Å–∫–∞–µ–º ssh-agent
          eval $(ssh-agent -s)

          # –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–∏—Ö —à–∞–≥–æ–≤
          echo "SSH_AUTH_SOCK=$SSH_AUTH_SOCK" >> $GITHUB_ENV
          echo "SSH_AGENT_PID=$SSH_AGENT_PID" >> $GITHUB_ENV

          # –î–æ–±–∞–≤–ª—è–µ–º –∫–ª—é—á —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–æ–π
          echo "üîë Adding SSH key to agent..."
          if ssh-add ~/.ssh/id_rsa; then
            echo "‚úÖ SSH key added successfully"
            ssh-add -l
          else
            echo "‚ùå Failed to add SSH key to agent"
            echo "Key file size: $(wc -c < ~/.ssh/id_rsa) bytes"
            echo "Key file head:"
            head -3 ~/.ssh/id_rsa
            echo "Key file tail:"
            tail -3 ~/.ssh/id_rsa
            exit 1
          fi

      - name: Add VPS to known hosts
        run: |
          ssh-keyscan -H ${{ env.VPS_HOST }} >> ~/.ssh/known_hosts

      - name: Test SSH connection
        run: |
          echo "üîê Testing SSH connection to VPS..."
          ssh -o ConnectTimeout=10 -o StrictHostKeyChecking=no ${{ env.VPS_USER }}@${{ env.VPS_HOST }} "echo '‚úÖ SSH connection successful!' && whoami && pwd"

      - name: Create deployment package
        run: |
          echo "üì¶ Creating deployment package..."
          echo "Current directory: $(pwd)"
          echo "Directory contents:"
          ls -la

          # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —á–∏—Å—Ç–æ–π –∫–æ–ø–∏–∏
          mkdir -p /tmp/portfolio-build

          # –ö–æ–ø–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω—ã–µ —Ñ–∞–π–ª—ã, –∏—Å–∫–ª—é—á–∞—è –Ω–µ–Ω—É–∂–Ω—ã–µ
          echo "üìã Copying files to temporary directory..."
          if command -v rsync >/dev/null 2>&1; then
            rsync -av \
              --exclude='.git' \
              --exclude='node_modules' \
              --exclude='.next' \
              --exclude='logs' \
              --exclude='*.log' \
              --exclude='.env*' \
              --exclude='coverage' \
              --exclude='.nyc_output' \
              --exclude='cypress/videos' \
              --exclude='cypress/screenshots' \
              --exclude='.cache' \
              --exclude='dist' \
              --exclude='build' \
              --exclude='.DS_Store' \
              --exclude='*.tmp' \
              --exclude='*.temp' \
              --exclude='.github' \
              --exclude='.husky' \
              ./ /tmp/portfolio-build/
          else
            # Fallback: –∏—Å–ø–æ–ª—å–∑—É–µ–º cp —Å find –¥–ª—è –∏—Å–∫–ª—é—á–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤
            echo "rsync not available, using cp with find..."
            find . -type f \
              ! -path './.git/*' \
              ! -path './node_modules/*' \
              ! -path './.next/*' \
              ! -path './logs/*' \
              ! -name '*.log' \
              ! -name '.env*' \
              ! -path './coverage/*' \
              ! -path './.nyc_output/*' \
              ! -path './cypress/videos/*' \
              ! -path './cypress/screenshots/*' \
              ! -path './.cache/*' \
              ! -path './dist/*' \
              ! -path './build/*' \
              ! -name '.DS_Store' \
              ! -name '*.tmp' \
              ! -name '*.temp' \
              ! -path './.github/*' \
              ! -path './.husky/*' \
              -exec cp --parents {} /tmp/portfolio-build/ \;
          fi

          # –°–æ–∑–¥–∞–µ–º –∞—Ä—Ö–∏–≤ –∏–∑ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
          echo "üóúÔ∏è Creating archive from clean copy..."
          cd /tmp
          tar -czf portfolio-deploy.tar.gz -C portfolio-build .

          # –ü–µ—Ä–µ–º–µ—â–∞–µ–º –∞—Ä—Ö–∏–≤ –æ–±—Ä–∞—Ç–Ω–æ –≤ —Ä–∞–±–æ—á—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
          mv portfolio-deploy.tar.gz $GITHUB_WORKSPACE/
          cd $GITHUB_WORKSPACE

          # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –∞—Ä—Ö–∏–≤–∞
          if [ -f "portfolio-deploy.tar.gz" ]; then
            echo "‚úÖ Archive created successfully"
            echo "Archive size: $(du -h portfolio-deploy.tar.gz | cut -f1)"
            echo "Archive contents (first 20 files):"
            tar -tzf portfolio-deploy.tar.gz | head -20
          else
            echo "‚ùå Failed to create archive"
            exit 1
          fi

          # –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
          rm -rf /tmp/portfolio-build

      - name: Upload deployment package
        run: |
          echo "üì§ Uploading deployment package to VPS..."
          echo "Target: ${{ env.VPS_USER }}@${{ env.VPS_HOST }}:/tmp/"

          # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
          if [ ! -f "portfolio-deploy.tar.gz" ]; then
            echo "‚ùå Deployment package not found!"
            exit 1
          fi

          echo "üìä Package info:"
          ls -lh portfolio-deploy.tar.gz

          # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª –Ω–∞ —Å–µ—Ä–≤–µ—Ä —Å –ø–æ–¥—Ä–æ–±–Ω—ã–º –≤—ã–≤–æ–¥–æ–º
          echo "üîÑ Starting upload..."
          scp -v -o ConnectTimeout=30 -o StrictHostKeyChecking=no portfolio-deploy.tar.gz ${{ env.VPS_USER }}@${{ env.VPS_HOST }}:/tmp/

          # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –∑–∞–≥—Ä—É–∑–∫–∏
          ssh -o StrictHostKeyChecking=no ${{ env.VPS_USER }}@${{ env.VPS_HOST }} "ls -lh /tmp/portfolio-deploy.tar.gz"

          echo "‚úÖ Package uploaded successfully"

      - name: Deploy application
        timeout-minutes: 45
        run: |
          ssh -o StrictHostKeyChecking=no -o ServerAliveInterval=30 -o ServerAliveCountMax=10 -o ConnectTimeout=10 ${{ env.VPS_USER }}@${{ env.VPS_HOST }} << 'EOF'
            set -e
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Docker –¥–ª—è –±–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω–æ–π —Ä–∞–±–æ—Ç—ã –≤ CI/CD
            export DOCKER_BUILDKIT=1
            export COMPOSE_DOCKER_CLI_BUILD=1
            export BUILDKIT_PROGRESS=plain
            
            echo "üöÄ Starting deployment to nkolosov.com..."
            echo "Current user: $(whoami)"
            echo "Current directory: $(pwd)"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Docker –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            if ! command -v docker >/dev/null 2>&1; then
              echo "üê≥ Docker –Ω–µ –Ω–∞–π–¥–µ–Ω, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º..."
              
              # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Docker –Ω–∞–ø—Ä—è–º—É—é
              sudo apt update
              sudo apt install -y ca-certificates curl gnupg lsb-release
              curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
              echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
              sudo apt update
              sudo apt install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin
              sudo systemctl start docker
              sudo systemctl enable docker
              echo "Docker —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: $(docker --version)"
            else
              echo "‚úÖ Docker —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: $(docker --version)"
            fi
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
            if [ ! -f "/tmp/portfolio-deploy.tar.gz" ]; then
              echo "‚ùå Deployment package not found in /tmp/"
              exit 1
            fi
            
            echo "üì¶ Package size: $(du -h /tmp/portfolio-deploy.tar.gz | cut -f1)"
            
            # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞ –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            mkdir -p /home/portfolio
            cd /home/portfolio
            
            echo "üìÇ Current location: $(pwd)"
            
            # –°–æ–∑–¥–∞–µ–º –±—ç–∫–∞–ø —Ç–µ–∫—É—â–µ–π –≤–µ—Ä—Å–∏–∏
            if [ -d "current" ]; then
              echo "üì¶ Creating backup of current version..."
              if [ -f "./current/scripts/backup.sh" ]; then
                echo "üóÑÔ∏è Attempting database backup..."
                sudo ./current/scripts/backup.sh database 2>/dev/null || echo "‚ö†Ô∏è  Database backup failed (this is normal for first deployment)"
              else
                echo "‚ÑπÔ∏è  No backup script found in current version"
              fi
              
              echo "üìÅ Moving current version to backup..."
              mv current backup-$(date +%Y%m%d_%H%M%S) 2>/dev/null || true
              echo "‚úÖ Backup created"
            else
              echo "‚ÑπÔ∏è  No existing version to backup (first deployment)"
            fi
            
            # –†–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ–º –Ω–æ–≤—É—é –≤–µ—Ä—Å–∏—é
            echo "üìÇ Extracting new version..."
            mkdir -p current
            cd current
            tar -xzf /tmp/portfolio-deploy.tar.gz
            
            echo "üìã Extracted files:"
            ls -la | head -10
            
            # –°–æ–∑–¥–∞–µ–º .env —Ñ–∞–π–ª –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞
            if [ ! -f ".env" ]; then
              if [ -f "../.env" ]; then
                echo "üìã Using existing .env file"
                cp ../.env .
              elif [ -f "env.example" ]; then
                echo "üîß Creating production .env from template..."
                
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ –ø–∞—Ä–æ–ª–∏ –∏ –∫–ª—é—á–∏ (—Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã –∏ —Ü–∏—Ñ—Ä—ã)
                DB_PASSWORD=$(openssl rand -hex 16)
                NEXTAUTH_SECRET=$(openssl rand -hex 32) 
                ENCRYPTION_KEY=$(openssl rand -hex 16)
                
                echo "üìù Generated secure credentials"
                echo "DB Password: $DB_PASSWORD (length: ${#DB_PASSWORD})"
                echo "NextAuth Secret: ${NEXTAUTH_SECRET:0:10}... (length: ${#NEXTAUTH_SECRET})"
                echo "Encryption Key: ${ENCRYPTION_KEY:0:10}... (length: ${#ENCRYPTION_KEY})"
                
                # –°–æ–∑–¥–∞–µ–º .env —Ñ–∞–π–ª –±–æ–ª–µ–µ –±–µ–∑–æ–ø–∞—Å–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º
                echo "üîÑ Processing env.example..."
                cp env.example .env.tmp
                
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª–µ–µ –ø—Ä–æ—Å—Ç—ã–µ –∑–∞–º–µ–Ω—ã –ø–æ –æ–¥–Ω–æ–π —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –æ—à–∏–±–æ–∫
                echo "üîÑ Replacing database password..."
                if ! sed -i "s/portfolio_password/$DB_PASSWORD/g" .env.tmp; then
                  echo "‚ùå Failed to replace database password with sed"
                  exit 1
                fi
                
                echo "üîÑ Replacing NextAuth secret..."
                if ! sed -i "s/your-super-secret-jwt-secret-key-here/$NEXTAUTH_SECRET/g" .env.tmp; then
                  echo "‚ùå Failed to replace NextAuth secret with sed"
                  exit 1
                fi
                
                echo "üîÑ Replacing encryption key..."
                if ! sed -i "s/your-32-character-encryption-key/$ENCRYPTION_KEY/g" .env.tmp; then
                  echo "‚ùå Failed to replace encryption key with sed"
                  exit 1
                fi
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–º–µ–Ω—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ
                if grep -q "portfolio_password\|your-super-secret-jwt-secret-key-here\|your-32-character-encryption-key" .env.tmp; then
                  echo "‚ö†Ô∏è Some placeholders were not replaced, using alternative method..."
                  
                  # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥ —Å awk
                  awk -v db_pass="$DB_PASSWORD" -v auth_secret="$NEXTAUTH_SECRET" -v enc_key="$ENCRYPTION_KEY" '
                  {
                    gsub(/portfolio_password/, db_pass)
                    gsub(/your-super-secret-jwt-secret-key-here/, auth_secret)
                    gsub(/your-32-character-encryption-key/, enc_key)
                    print
                  }' env.example > .env
                  rm .env.tmp
                else
                  # –ü–µ—Ä–µ–º–µ—â–∞–µ–º –≥–æ—Ç–æ–≤—ã–π —Ñ–∞–π–ª
                  mv .env.tmp .env
                fi
                
                echo "‚úÖ Production .env file created with secure passwords"
                echo "üîß Don't forget to configure SMTP settings for email functionality"
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                echo "üìã First 10 lines of .env:"
                head -10 .env
              else
                echo "‚ùå No .env template found!"
                exit 1
              fi
            else
              echo "‚úÖ .env file already exists"
            fi
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Å–∫—Ä–∏–ø—Ç–æ–≤
            if [ ! -d "scripts" ]; then
              echo "‚ùå Scripts directory not found!"
              exit 1
            fi
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∞–≤–∞
            echo "üîß Setting permissions..."
            chmod +x scripts/*.sh
            
            # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è portfolio –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            if ! id "portfolio" &>/dev/null; then
              echo "üë§ Creating portfolio user..."
              sudo useradd -m -s /bin/bash portfolio || true
            fi
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤ –≥—Ä—É–ø–ø—É docker (–ø–æ—Å–ª–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ Docker)
            sudo usermod -aG docker portfolio || true
            
            # –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ Docker daemon –∑–∞–ø—É—â–µ–Ω –∏ –¥–æ—Å—Ç—É–ø–µ–Ω
            sudo systemctl start docker
            sudo systemctl enable docker
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∞–≤–∞ –Ω–∞ Docker socket –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            sudo chmod 666 /var/run/docker.sock || true
            
            # –°–æ–∑–¥–∞–µ–º Docker –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è portfolio
            sudo mkdir -p /home/portfolio/.docker
            sudo chown -R portfolio:portfolio /home/portfolio/.docker
            sudo chmod 755 /home/portfolio/.docker
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∞–≤–∞ –Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞
            sudo chown -R portfolio:portfolio . 2>/dev/null || true
            
            # –ó–∞–ø—É—Å–∫ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ Docker –ø–µ—Ä–µ–¥ –¥–µ–ø–ª–æ–µ–º
            echo "üîç Running Docker diagnostics..."
            if [ -f "./scripts/docker-diagnostics.sh" ]; then
              chmod +x ./scripts/docker-diagnostics.sh
              ./scripts/docker-diagnostics.sh config || echo "‚ö†Ô∏è Docker diagnostics completed with warnings"
            else
              echo "‚ÑπÔ∏è Docker diagnostics script not found, skipping..."
            fi
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Docker daemon –¥–ª—è –±–æ–ª–µ–µ —Å—Ç–∞–±–∏–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã
            echo "üîß Optimizing Docker daemon configuration..."
            sudo mkdir -p /etc/docker
            if [ -f "./docker/daemon.json" ]; then
              echo "üìã Using optimized daemon.json configuration"
              sudo cp ./docker/daemon.json /etc/docker/daemon.json
            else
              echo "üìù Creating basic daemon.json configuration"
              echo '{' | sudo tee /etc/docker/daemon.json > /dev/null
              echo '  "log-driver": "json-file",' | sudo tee -a /etc/docker/daemon.json > /dev/null
              echo '  "log-opts": {"max-size": "10m", "max-file": "3"},' | sudo tee -a /etc/docker/daemon.json > /dev/null
              echo '  "storage-driver": "overlay2",' | sudo tee -a /etc/docker/daemon.json > /dev/null
              echo '  "max-concurrent-downloads": 3,' | sudo tee -a /etc/docker/daemon.json > /dev/null
              echo '  "max-concurrent-uploads": 5,' | sudo tee -a /etc/docker/daemon.json > /dev/null
              echo '  "registry-mirrors": ["https://mirror.gcr.io"]' | sudo tee -a /etc/docker/daemon.json > /dev/null
              echo '}' | sudo tee -a /etc/docker/daemon.json > /dev/null
            fi
            
            # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º Docker –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
            sudo systemctl restart docker
            sleep 10
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º Docker
            echo "üîç Verifying Docker configuration..."
            docker info | grep -E "Storage Driver|Logging Driver" || true
            
            # –û—á–∏—Å—Ç–∫–∞ Docker –ø–µ—Ä–µ–¥ —Å–±–æ—Ä–∫–æ–π –¥–ª—è –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è –º–µ—Å—Ç–∞
            echo "üßπ Cleaning up Docker resources..."
            docker system prune -f --volumes || true
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –¥–µ–ø–ª–æ–π —á–µ—Ä–µ–∑ Docker
            echo "üê≥ Starting Docker deployment..."
            if [ -f "./scripts/deploy.sh" ]; then
              # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Ç –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è portfolio —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è
              sudo -u portfolio -i bash -c "cd /home/portfolio/current && export DOCKER_BUILDKIT=1 && export COMPOSE_DOCKER_CLI_BUILD=1 && export BUILDKIT_PROGRESS=plain && ./scripts/deploy.sh"
            else
              echo "‚ùå Deploy script not found!"
              exit 1
            fi
            
            # –û—á–∏—Å—Ç–∫–∞
            rm /tmp/portfolio-deploy.tar.gz
            
            echo "‚úÖ Deployment completed successfully!"
          EOF

      - name: Health check
        run: |
          echo "üîç Performing health check..."

          # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–æ–≤ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
          ssh -o StrictHostKeyChecking=no ${{ env.VPS_USER }}@${{ env.VPS_HOST }} << 'EOF'
            echo "üìä Checking Docker services status..."
            cd /home/portfolio/current
            docker compose ps || echo "Docker compose not running yet"
            
            echo "üîç Checking running containers..."
            docker ps --format "table {{.Names}}\\t{{.Status}}\\t{{.Ports}}"
          EOF

          # –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
          echo "‚è≥ Waiting 60 seconds for application to start..."
          sleep 60

          # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å
          echo "üåê Testing application endpoints..."
          for i in {1..15}; do
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º HTTP —Å–Ω–∞—á–∞–ª–∞
            if curl -f -s --connect-timeout 10 http://nkolosov.com/health > /dev/null 2>&1; then
              echo "‚úÖ HTTP health check passed!"
              break
            fi
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º HTTPS
            if curl -f -s --connect-timeout 10 -k https://nkolosov.com/health > /dev/null 2>&1; then
              echo "‚úÖ HTTPS health check passed!"
              break
            fi
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ IP
            if curl -f -s --connect-timeout 10 http://${{ env.VPS_HOST }}:3000/api/health > /dev/null 2>&1; then
              echo "‚úÖ Direct IP health check passed!"
              break
            fi
            
            echo "‚è≥ Attempt $i/15 - application not ready yet..."
            if [ $i -eq 15 ]; then
              echo "‚ùå Health check failed after 15 attempts"
              
              # –î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø—Ä–∏ –æ—à–∏–±–∫–µ
              echo "üîç Diagnostic information:"
              ssh -o StrictHostKeyChecking=no ${{ env.VPS_USER }}@${{ env.VPS_HOST }} << 'DIAG_EOF'
                echo "=== Docker containers ==="
                docker ps -a
                echo "=== Application logs ==="
                cd /home/portfolio/current
                docker compose logs --tail=50 app || echo "No app logs available"
                echo "=== Nginx logs ==="
                docker compose logs --tail=20 nginx || echo "No nginx logs available"
              DIAG_EOF
              
              exit 1
            fi
            
            sleep 20
          done

          echo "üéâ Application is healthy and responding!"

      - name: Deployment summary
        if: always()
        run: |
          echo "## üöÄ Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **Target**: https://nkolosov.com" >> $GITHUB_STEP_SUMMARY
          echo "- **Status**: ${{ job.status }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Branch**: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
